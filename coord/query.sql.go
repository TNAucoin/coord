// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package coord

import (
	"context"
)

const getJob = `-- name: GetJob :one
select id, status
from jobs
where id = $1
limit 1
`

func (q *Queries) GetJob(ctx context.Context, id int64) (Job, error) {
	row := q.db.QueryRow(ctx, getJob, id)
	var i Job
	err := row.Scan(&i.ID, &i.Status)
	return i, err
}

const insertJob = `-- name: InsertJob :one
insert into jobs (
  status
) values ( $1 )
returning id, status
`

func (q *Queries) InsertJob(ctx context.Context, status string) (Job, error) {
	row := q.db.QueryRow(ctx, insertJob, status)
	var i Job
	err := row.Scan(&i.ID, &i.Status)
	return i, err
}

const listJobs = `-- name: ListJobs :many
select id, status
from jobs
order by status
`

func (q *Queries) ListJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.Query(ctx, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(&i.ID, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
